-----Номер 2

import time

def custom_sort(arr):
    # Если список пустой или содержит один элемент, он считается отсортированным
    if len(arr) <= 1:
        return arr
    else:
        # Выбор среднего элемента
        mid_index = len(arr) // 2
        pivot = arr[mid_index]  # выбираем средний элемент

        # Разделение на элементы меньше и больше опорного
        left = [x for x in arr if x < pivot]
        right = [x for x in arr if x > pivot]
        
        # Рекурсивная сортировка левой и правой части
        return custom_sort(left) + [pivot] + custom_sort(right)

# Генерация массива длиной 1000 элементов, отсортированного в обратном порядке
array_length = 1000
array = list(range(array_length, 0, -1))

# Замер времени выполнения
start_time = time.time()
sorted_array = custom_sort(array)
end_time = time.time()

# Вывод отсортированного массива и времени выполнения
print("Отсортированный массив:", sorted_array)
print("Время выполнения:", end_time - start_time, "секунд")

-----Номер 7

import numpy as np

class Matrix:
    def __init__(self, file_path):
        self.data = np.loadtxt(file_path)
    
    def __add__(self, other):
        if self.data.shape != other.data.shape:
            raise ValueError("Matrices must have the same dimensions for addition.")
        return Matrix.from_array(self.data + other.data)

    def __mul__(self, other):
        if isinstance(other, (int, float)):  # Умножение на число
            return Matrix.from_array(self.data * other)
        elif isinstance(other, Matrix):  # Умножение матриц
            if self.data.shape[1] != other.data.shape[0]:
                raise ValueError("Number of columns in the first matrix must be equal to the number of rows in the second matrix.")
            return Matrix.from_array(np.dot(self.data, other.data))
        else:
            raise ValueError("Unsupported type for multiplication.")

    def transpose(self):
        return Matrix.from_array(self.data.T)

    def determinant(self):
        if self.data.shape[0] != self.data.shape[1]:
            raise ValueError("Determinant can only be calculated for square matrices.")
        return np.linalg.det(self.data)

    def save_to_file(self, file_path):
        np.savetxt(file_path, self.data)

    @classmethod
    def from_array(cls, array):
        matrix_instance = cls.__new__(cls)
        matrix_instance.data = array
        return matrix_instance

    def __str__(self):
        return str(self.data)

# Пример использования
if __name__ == "__main__":
    # Создание матрицы из файла
    matrix1 = Matrix('matrix1.txt')
    matrix2 = Matrix('matrix2.txt')

    # Сложение матриц
    sum_matrix = matrix1 + matrix2
    print("Сумма матриц:\n", sum_matrix)

    # Умножение матрицы на число
    scaled_matrix = matrix1 * 2
    print("Матрица, умноженная на 2:\n", scaled_matrix)

    # Умножение двух матриц
    product_matrix = matrix1 * matrix2
    print("Произведение матриц:\n", product_matrix)

    # Транспонирование матрицы
    transposed_matrix = matrix1.transpose()
    print("Транспонированная матрица:\n", transposed_matrix)

    # Вычисление определителя
    det = matrix1.determinant()
    print("Определитель матрицы:", det)

    # Запись матрицы в файл
    sum_matrix.save_to_file('result_matrix.txt')
